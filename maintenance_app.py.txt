import os
import sqlite3
import googlemaps
import pandas as pd
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from flask_socketio import SocketIO, emit
from datetime import datetime, timedelta
from dotenv import load_dotenv
from auth import register_user, authenticate_user, login_manager
from config import get_db_connection

app = Flask(__name__)
load_dotenv()
app.secret_key = os.getenv("SECRET_KEY", 'your_secret_key_here')  # Update for security
login_manager.init_app(app)
socketio = SocketIO(app)

# Google Maps API Client
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")
gmaps = googlemaps.Client(key=GOOGLE_MAPS_API_KEY)

# Dictionary to store real-time locations of team members
locations = {}

# Database Setup and Load from Excel
def init_db(excel_file):
    data = pd.read_excel(excel_file)
    conn = sqlite3.connect('maintenance.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS tasks
                     (id INTEGER PRIMARY KEY, location TEXT, task TEXT, duration INTEGER)''')
    for _, row in data.iterrows():
        cursor.execute("INSERT INTO tasks (location, task, duration) VALUES (?, ?, ?)",
                       (row['location'], row['task'], row['duration']))
    conn.commit()
    conn.close()

# Help Center page
@app.route('/help_center')
def help_center():
    return render_template('help_center.html')

# Register a new user
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        register_user(username, password)
        flash("Registration successful! You can now log in.")
        return redirect(url_for('login'))
    return render_template('register.html')

# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = authenticate_user(username, password)
        if user:
            login_user(user)
            flash("Logged in successfully!")
            return redirect(url_for('map'))
        flash("Invalid credentials. Please try again.")
    return render_template('login.html')

# Logout route
@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash("Logged out successfully!")
    return redirect(url_for('login'))

# Real-time map view (protected route)
@app.route('/map')
@login_required
def map():
    return render_template('map.html')

# Endpoint to add tasks individually
@app.route('/add_task', methods=['POST'])
def add_task():
    data = request.json
    location = data['location']
    task = data['task']
    duration = data['duration']
    conn = sqlite3.connect('maintenance.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tasks (location, task, duration) VALUES (?, ?, ?)",
                   (location, task, duration))
    conn.commit()
    conn.close()
    return jsonify({'status': 'Task added successfully'}), 201

# Calculate Optimized Route
@app.route('/calculate_route', methods=['GET'])
def calculate_route():
    conn = sqlite3.connect('maintenance.db')
    cursor = conn.cursor()
    cursor.execute("SELECT location, duration FROM tasks")
    tasks = cursor.fetchall()
    conn.close()
   
    locations = [task[0] for task in tasks]
    durations = [task[1] for task in tasks]
   
    route_data = gmaps.directions(
        origin=locations[0],
        destination=locations[-1],
        waypoints=locations[1:-1],
        optimize_waypoints=True
    )
   
    optimized_order = route_data[0]['waypoint_order']
    ordered_tasks = [(locations[i], durations[i]) for i in optimized_order]
   
    total_time = sum(durations) + sum([leg['duration']['value'] for leg in route_data[0]['legs']])
   
    return jsonify({
        'ordered_tasks': ordered_tasks,
        'total_time_minutes': total_time // 60,
        'total_time_hours': total_time // 3600
    })

# Parking Ticket Payment (Placeholder)
@app.route('/pay_parking', methods=['POST'])
def pay_parking():
    data = request.json
    location = data['location']
    duration = data['duration']
   
    # Placeholder for API integration with RingGo or another parking service
    payment_response = {
        'status': 'Parking ticket paid',
        'location': location,
        'duration': duration
    }
   
    return jsonify(payment_response), 200

# Handle incoming location updates from team members
@socketio.on('update_location')
def update_location(data):
    team_member_id = data['team_member_id']
    latitude = data['latitude']
    longitude = data['longitude']
    locations[team_member_id] = {'latitude': latitude, 'longitude': longitude}
    emit('location_update', {'team_member_id': team_member_id, 'latitude': latitude, 'longitude': longitude}, broadcast=True)

if __name__ == '__main__':
    init_db('company_maintenance_data.xlsx')  # Load initial data from Excel
    port = int(os.environ.get("PORT", 5000))
    socketio.run(app, host='0.0.0.0', port=port, debug=True)

#Explanation of Key Sections in the Combined Code
#Environment Variables: The Google Maps API key and secret keys are loaded from environment variables. Ensure you set these up in a .env file locally and as Config Vars in Heroku.

#User Authentication: Routes for registration, login, and logout are implemented using flask_login, along with protected routes that require authentication (e.g., /map).

#Database Setup: The init_db function reads from an Excel file and populates the SQLite tasks table with predefined tasks.

#Google Maps API Integration: The calculate_route endpoint calculates an optimized route based on task locations, and the result is returned in JSON format.

#Real-Time Location Updates with SocketIO: The update_location function listens for updates from team members and broadcasts their locations to all connected clients in real time.

#Parking Payment Placeholder: The /pay_parking endpoint acts as a placeholder for integrating with the RingGo API or another parking service in the future.

#Heroku Compatibility: The code sets up a dynamic port, ensuring it runs on both local and Heroku environments with socketio.run().
